AWSTemplateFormatVersion: '2010-09-09'
Description: AWS CloudFormation to create an Amazon EC2 instance with Session Manager Enabled 

Parameters:

  OperatingClass:
    Description: The OperatingClass
    Type: String
    AllowedValues:
    - Windows
    - Linux

  OperatingSystemType:
    Description: The OperatingSystem type
    Type: String
    AllowedValues:
    - win2019
    - Amazlinux

  RootVolume:
    Description: Choose the Root Volume size appropriately. This cannot be changed at a later time.
    Type: String
    Default: 60
    AllowedValues:
    - 60
    - 100
    - 150
    - 200
    - 250
    - 300
    - 350
    - 400
    - 450
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000

  DataVolume1:
    Description: Enter additional Volume2 Size
    Type: String
    Default: NotRequired
    AllowedValues:
    - NotRequired
    - 50
    - 100
    - 150
    - 200
    - 250
    - 300
    - 350
    - 400
    - 450
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000

  DataVolume2:
    Description: Enter additional Volume2 Size
    Type: String
    Default: NotRequired
    AllowedValues:
    - NotRequired
    - 50
    - 100
    - 150
    - 200
    - 250
    - 300
    - 350
    - 400
    - 450
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000

  DataVolume3:
    Description: Enter additional Volume3 Size
    Type: String
    Default: NotRequired
    AllowedValues:
    - NotRequired
    - 50
    - 100
    - 150
    - 200
    - 250
    - 300
    - 350
    - 400
    - 450
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000

  DataVolume4:
    Description: Enter additional Volume4 Size
    Type: String
    Default: NotRequired
    AllowedValues:
    - NotRequired
    - 50
    - 100
    - 150
    - 200
    - 250
    - 300
    - 350
    - 400
    - 450
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000

  DataVolume5:
    Description: Enter additional Volume5 Size
    Type: String
    Default: NotRequired
    AllowedValues:
    - NotRequired
    - 50
    - 100
    - 150
    - 200
    - 250
    - 300
    - 350
    - 400
    - 450
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000

  InstanceType:
    Description: EC2 instance type
    Type: String

  LatestAmiIdWindows2019:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-windows-latest/Windows_Server-2019-English-Full-Base'
    Description:  Do not change this value, this automatically picks up the latest patched Windows 2019 image

  LatestAmiIdAmazonLinux:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'  
    Description:  Do not change this value, this automatically picks up the latest patched Amazon Linux 2 image 
    
  SecurityGroupIds:
    Type: List<AWS::EC2::SecurityGroup::Id>
    Description: The list of SecurityGroupIds in your Virtual Private Cloud (VPC)
    AllowedPattern: '.+'

  SubnetIds:
    Type: AWS::EC2::Subnet::Id
    Description: The list of Subnets in your Virtual Private Cloud (VPC)
    AllowedPattern: '.+'

  ApplicationName:
    Type: String
    Description: Type the Name of Applicaton to be installed
    Default: Provide-the-name-of-the-application

  Tier:
    Description: Deployment tier of the resource
    Type: String
    AllowedValues:
      - dev
      - stage
      - prod
      - sandbox
    Default: dev
  InstanceName:
    Type: String
    Description: Type the Name of the server
    AllowedPattern: '.+'
    ConstraintDescription: This will be used for naming the server. Provide an appropriate value.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: EC2Instance and Network Configurations
        Parameters:
          - InstanceName
          - InstanceType
          - OperatingClass
          - LatestAmiIdAmazonLinux
          - LatestAmiIdWindows2019          
          - OperatingSystemType
          - SubnetIds
          - SecurityGroupIds
      - Label:
          default: EC2 Instance Disk Configurations
        Parameters:
          - RootVolume
          - DataVolume1
          - DataVolume2
          - DataVolume3
          - DataVolume4
          - DataVolume5
Conditions:
  DataVolume1:
    Fn::Not:
    - Fn::Equals:
      - Ref: DataVolume1
      - NotRequired

  DataVolume2:
    Fn::Not:
    - Fn::Equals:
      - Ref: DataVolume2
      - NotRequired

  DataVolume3:
    Fn::Not:
    - Fn::Equals:
      - Ref: DataVolume3
      - NotRequired

  DataVolume4:
    Fn::Not:
    - Fn::Equals:
      - Ref: DataVolume4
      - NotRequired

  DataVolume5:
    Fn::Not:
    - Fn::Equals:
      - Ref: DataVolume5
      - NotRequired

  Amazon:
    Fn::Not:
    - Fn::Equals:
      - Ref: OperatingSystemType
      - Amazlinux

  IsWindows: !Equals [ !Ref OperatingClass, "Windows" ]

  IsUnix: !Equals [ !Ref OperatingClass, "Linux"]

Resources:

  RootRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub ${InstanceName}-Instancerole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/CloudWatchAgentAdminPolicy'
        - 'arn:aws:iam::aws:policy/CloudWatchFullAccess'
        - 'arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy'
        - 'arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore'
        - 'arn:aws:iam::aws:policy/AmazonSSMDirectoryServiceAccess'
        - 'arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM'
        - 'arn:aws:iam::aws:policy/AmazonInspectorFullAccess'

  InstanceInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      InstanceProfileName: !Sub ${InstanceName}-InstanceProfile
      Roles:
        - !Ref RootRole

  InstancePermissionsPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: !Sub ${InstanceName}-InstancePermissionsPolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - 'cloudwatch:PutMetricAlarm'
              - 'kms:Decrypt'
              - 'ec2:DescribeInstances'
              - 'ec2:CreateTags'
            Resource: "*"
      Roles:
        - Ref: "RootRole"

  WindowsEC2Instance:
    Condition: IsWindows
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref LatestAmiIdWindows2019
      InstanceType:
        Ref: InstanceType
      SubnetId:
        Ref: SubnetIds
      SecurityGroupIds:
        Ref: SecurityGroupIds
      BlockDeviceMappings:
      - DeviceName:
          Fn::If:
          - Amazon
          - "/dev/sda1"
          - "/dev/xvda"
        Ebs:
          VolumeType: gp3
          VolumeSize:
            Ref: RootVolume
          Encrypted: 'True'
      IamInstanceProfile: !Ref InstanceInstanceProfile
      InstanceInitiatedShutdownBehavior: stop
      UserData:
          'Fn::Base64': !Sub |
              <powershell>
                Set-PSDebug -Trace 1
                $ec2_name = hostname
                Write-Output  "Local hostname found:$ec2_name"
                $hostNameFromTag = '${InstanceName}'
                Write-Output  "Local hostname found:$hostNameFromTag"
                if (!$hostNameFromTag) {
                    Write-Output  "tags not found or permission denied. exiting"
                    exit 1
                }
                Write-Output  "Hostname required:$hostNameFromTag"

                if ($ec2_name -ne $hostNameFromTag){
                  Write-Output  "The name set in the instance is different from the name from EC2 tags.."
                  Write-Output  "current name is $ec2_name, but the name from tag is $hostNameFromTag"
                  Write-Output  "Initiating the name change.."

                  try {
                    Rename-Computer -NewName $hostNameFromTag -Force -ErrorAction Stop
                  }
                    catch {
                      Write-Output  "An error occurred:"
                      Write-Output  $_.ScriptStackTrace
                      Write-Output  $PSItem.Exception.Message
                      exit 1
                    }
                  Write-Output  "Restarting to effect the name change.."
                  shutdown /r /f /t 0
                }

                else {
                  Write-Output  "The name set in the instance is same as the name from the name from EC2 tags.."
                }
              #cfn-init.exe -v --stack=${AWS::StackId} --resource=WindowsEC2Instance --region=${AWS::Region} --configsets=setupcfnhup,renamehost,domainjoin,sendsignal
              </powershell>

      Tags:
      - Key: application
        Value:
          Ref: ApplicationName
      - Key: tier
        Value:
          Ref: Tier
      - Key: Name
        Value:
          Ref: InstanceName
      - Key: technicalContact
        Value:
          Ref: TechnicalContact
      - Key: division
        Value:
          Ref: Division
      - Key: OS
        Value:
          Ref: OperatingSystemType
      - Key: OperatingClass
        Value:
          Ref: OperatingClass
      - Key: department
        Value:  
          Ref: Department    

  LinuxEC2Instance:
    Condition: IsUnix
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref LatestAmiIdAmazonLinux     
      InstanceType:
        Ref: InstanceType
      SubnetId:
        Ref: SubnetIds
      SecurityGroupIds:
        Ref: SecurityGroupIds
      BlockDeviceMappings:
      - DeviceName:
          Fn::If:
          - Amazon
          - "/dev/sda1"
          - "/dev/xvda"
        Ebs:
          VolumeType: gp3
          VolumeSize: !Ref RootVolume
          Encrypted: 'True'
      IamInstanceProfile: !Ref InstanceInstanceProfile
      InstanceInitiatedShutdownBehavior: stop
      UserData:
          'Fn::Base64': !Sub |
              #!/bin/bash
              #INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
              #NAME_FROM_TAG=$(aws ec2 describe-tags --filters "Name=resource-id,Values=$INSTANCE_ID" "Name=key,Values=Name" --region=${AWS::Region} --output=text | cut -f5)
              HOST_NAME=$(hostname)
              NAME_FROM_TAG=${InstanceName}
              if [ -z "$NAME_FROM_TAG" ]
              then
                    echo "no name set in tags..exiting"
                        exit 0
              else
                    if [ $NAME_FROM_TAG != $HOST_NAME ]
                        then
                              echo "name changing.."
                              hostnamectl set-hostname $NAME_FROM_TAG
                        fi
              fi
              # /opt/aws/bin/cfn-init -v -s ${AWS::StackId} -r LinuxEC2Instance --region ${AWS::Region} -c setupcfnhup,renamehost,domainjoin
              # /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource LinuxEC2Instance --region ${AWS::Region}
      Tags:
      - Key: application
        Value:
          Ref: ApplicationName
      - Key: tier
        Value:
          Ref: Tier
      - Key: Name
        Value:
          Ref: InstanceName
      - Key: technicalContact
        Value:
          Ref: TechnicalContact
      - Key: division
        Value:
          Ref: Division
      - Key: OS
        Value:
          Ref: OperatingSystemType
      - Key: OperatingClass
        Value:
          Ref: OperatingClass
      - Key: department
        Value:  
          Ref: Department

  Volume1:
    Type: AWS::EC2::Volume
    Condition: DataVolume1
    DeletionPolicy: Delete
    Properties:
      VolumeType: gp3
      Size:
        Ref: DataVolume1
      Encrypted: 'True'
      AvailabilityZone: !If [ IsUnix, !GetAtt LinuxEC2Instance.AvailabilityZone, !GetAtt WindowsEC2Instance.AvailabilityZone ]
      Tags:
      - Key: Name
        Value:
          Ref: InstanceName
      - Key: InstanceId
        Value: !If [ IsUnix, !Ref LinuxEC2Instance, !Ref WindowsEC2Instance ]

  AttachVolume1:
    Type: AWS::EC2::VolumeAttachment
    Condition: DataVolume1
    Properties:
      Device:
        Fn::If:
        - Amazon
        - "/dev/sdk"
        - "/dev/xvdb"
      InstanceId: !If [ IsUnix, !Ref LinuxEC2Instance, !Ref WindowsEC2Instance ]
      VolumeId:
        Ref: Volume1

  Volume2:
    Type: AWS::EC2::Volume
    Condition: DataVolume2
    DeletionPolicy: Delete
    Properties:
      VolumeType: gp3
      Size:
        Ref: DataVolume2
      Encrypted: 'True'
      AvailabilityZone: !If [ IsUnix, !GetAtt LinuxEC2Instance.AvailabilityZone, !GetAtt WindowsEC2Instance.AvailabilityZone ]
      Tags:
      - Key: Name
        Value:
          Ref: InstanceName
      - Key: InstanceId
        Value: !If [ IsUnix, !Ref LinuxEC2Instance, !Ref WindowsEC2Instance ]

  AttachVolume2:
    Type: AWS::EC2::VolumeAttachment
    Condition: DataVolume2
    Properties:
      Device:
        Fn::If:
        - Amazon
        - "/dev/sdj"
        - "/dev/xvdc"
      InstanceId: !If [ IsUnix, !Ref LinuxEC2Instance, !Ref WindowsEC2Instance ]
      VolumeId:
        Ref: Volume2

  Volume3:
    Type: AWS::EC2::Volume
    Condition: DataVolume3
    DeletionPolicy: Delete
    Properties:
      VolumeType: gp3
      Size:
        Ref: DataVolume3
      Encrypted: 'True'
      AvailabilityZone: !If [ IsUnix, !GetAtt LinuxEC2Instance.AvailabilityZone, !GetAtt WindowsEC2Instance.AvailabilityZone ]
      Tags:
      - Key: Name
        Value:
          Ref: InstanceName
      - Key: InstanceId
        Value: !If [ IsUnix, !Ref LinuxEC2Instance, !Ref WindowsEC2Instance ]

  AttachVolume3:
    Type: AWS::EC2::VolumeAttachment
    Condition: DataVolume3
    Properties:
      Device:
        Fn::If:
        - Amazon
        - "/dev/sdd"
        - "/dev/xvdd"
      InstanceId: !If [ IsUnix, !Ref LinuxEC2Instance, !Ref WindowsEC2Instance ]
      VolumeId:
        Ref: Volume3

  Volume4:
    Type: AWS::EC2::Volume
    Condition: DataVolume4
    DeletionPolicy: Delete
    Properties:
      VolumeType: gp3
      Size:
        Ref: DataVolume4
      Encrypted: 'True'
      AvailabilityZone: !If [ IsUnix, !GetAtt LinuxEC2Instance.AvailabilityZone, !GetAtt WindowsEC2Instance.AvailabilityZone ]
      Tags:
      - Key: Name
        Value:
          Ref: InstanceName
      - Key: InstanceId
        Value: !If [ IsUnix, !Ref LinuxEC2Instance, !Ref WindowsEC2Instance ]

  AttachVolume4:
    Type: AWS::EC2::VolumeAttachment
    Condition: DataVolume4
    Properties:
      Device:
        Fn::If:
        - Amazon
        - "/dev/sde"
        - "/dev/xvde"
      InstanceId: !If [ IsUnix, !Ref LinuxEC2Instance, !Ref WindowsEC2Instance ]
      VolumeId:
        Ref: Volume4

  Volume5:
    Type: AWS::EC2::Volume
    Condition: DataVolume5
    DeletionPolicy: Delete
    Properties:
      VolumeType: gp3
      Size:
        Ref: DataVolume5
      Encrypted: 'True'
      AvailabilityZone: !If [ IsUnix, !GetAtt LinuxEC2Instance.AvailabilityZone, !GetAtt WindowsEC2Instance.AvailabilityZone ]
      Tags:
      - Key: Name
        Value:
          Ref: InstanceName
      - Key: InstanceId
        Value: !If [ IsUnix, !Ref LinuxEC2Instance, !Ref WindowsEC2Instance ]

  AttachVolume5:
    Type: AWS::EC2::VolumeAttachment
    Condition: DataVolume5
    Properties:
      Device:
        Fn::If:
        - Amazon
        - "/dev/sdf"
        - "/dev/xvdf"
      InstanceId: !If [ IsUnix, !Ref LinuxEC2Instance, !Ref WindowsEC2Instance ]
      VolumeId:
        Ref: Volume5

  StatusCheckAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Trigger an Alaram when instance status check failed on instance for 10
        consecutive minutes.
      Namespace: AWS/EC2
      MetricName: StatusCheckFailed_System
      AlarmName: !Join [ ":" ,[!Ref 'InstanceName', !If [ IsUnix, !Ref LinuxEC2Instance, !Ref WindowsEC2Instance ], Ec2StatusCheck]]
      Statistic: Minimum
      Period: '60'
      EvaluationPeriods: '1'
      ComparisonOperator: GreaterThanThreshold
      Threshold: '0'
      AlarmActions:
        - !Sub arn:${AWS::Partition}:sns:${AWS::Region}:${AWS::AccountId}:dept-Ec2HealthCheck
      Dimensions:
      - Name: InstanceId
        Value: !If [ IsUnix, !Ref LinuxEC2Instance, !Ref WindowsEC2Instance ]


Outputs:

  InstanceId:
    Description: InstanceId of the newly created EC2 instance
    Value: !If [ IsUnix, !Ref LinuxEC2Instance, !Ref WindowsEC2Instance ]

  AZ:
    Description: Availability Zone of the newly created EC2 instance
    Value: !If [ IsUnix, !GetAtt LinuxEC2Instance.AvailabilityZone, !GetAtt WindowsEC2Instance.AvailabilityZone ]

  PrivateIP:
    Description: Public IP address of the newly created EC2 instance
    Value: !If [ IsUnix, !GetAtt LinuxEC2Instance.PrivateIp, !GetAtt WindowsEC2Instance.PrivateIp ]
